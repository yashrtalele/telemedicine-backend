from django.shortcuts import render
import json
import ipfsApi
from retry import retry
import string
import random
import urllib.request
from web3 import Web3
from rest_framework import generics, status, views, permissions
from rest_framework.response import Response

# Create your views here.
class FileHashBlockchain(generics.GenericAPIView):
    serializer_class = DoctorsSerializer
    renderer_classes = (UserRenderer,)
    def post(self, request, fomat=None):
        data = request.data
        uuid = data.get('uuid')
        email = data.get('email')
        name = data.get('name')
        file_hash = data.get('file_hash')

        url = 'http://127.0.0.1:8545'
        w3 = Web3(Web3.HTTPProvider(url))
        
        abi = json.loads('[{"inputs":[],"name":"get","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_value","type":"string"}],"name":"set","outputs":[],"stateMutability":"nonpayable","type":"function"}]')
        bytecode = '6080604052604051806020016040528060008152506000908051906020019061002992919061003c565b5034801561003657600080fd5b50610140565b828054610048906100df565b90600052602060002090601f01602090048101928261006a57600085556100b1565b82601f1061008357805160ff19168380011785556100b1565b828001600101855582156100b1579182015b828111156100b0578251825591602001919060010190610095565b5b5090506100be91906100c2565b5090565b5b808211156100db5760008160009055506001016100c3565b5090565b600060028204905060018216806100f757607f821691505b6020821081141561010b5761010a610111565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6104a88061014f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634ed3885e1461003b5780636d4ce63c14610057575b600080fd5b61005560048036038101906100509190610234565b610075565b005b61005f61008f565b60405161006c91906102b6565b60405180910390f35b806000908051906020019061008b929190610121565b5050565b60606000805461009e9061038c565b80601f01602080910402602001604051908101604052809291908181526020018280546100ca9061038c565b80156101175780601f106100ec57610100808354040283529160200191610117565b820191906000526020600020905b8154815290600101906020018083116100fa57829003601f168201915b5050505050905090565b82805461012d9061038c565b90600052602060002090601f01602090048101928261014f5760008555610196565b82601f1061016857805160ff1916838001178555610196565b82800160010185558215610196579182015b8281111561019557825182559160200191906001019061017a565b5b5090506101a391906101a7565b5090565b5b808211156101c05760008160009055506001016101a8565b5090565b60006101d76101d2846102fd565b6102d8565b9050828152602081018484840111156101f3576101f2610452565b5b6101fe84828561034a565b509392505050565b600082601f83011261021b5761021a61044d565b5b813561022b8482602086016101c4565b91505092915050565b60006020828403121561024a5761024961045c565b5b600082013567ffffffffffffffff81111561026857610267610457565b5b61027484828501610206565b91505092915050565b60006102888261032e565b6102928185610339565b93506102a2818560208601610359565b6102ab81610461565b840191505092915050565b600060208201905081810360008301526102d0818461027d565b905092915050565b60006102e26102f3565b90506102ee82826103be565b919050565b6000604051905090565b600067ffffffffffffffff8211156103185761031761041e565b5b61032182610461565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b82818337600083830152505050565b60005b8381101561037757808201518184015260208101905061035c565b83811115610386576000848401525b50505050565b600060028204905060018216806103a457607f821691505b602082108114156103b8576103b76103ef565b5b50919050565b6103c782610461565b810181811067ffffffffffffffff821117156103e6576103e561041e565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f830116905091905056fea2646970667358221220c187c4a9b3a132551ae5e37e9a25cda795acb1752865c56454b7b1d45dc03e2664736f6c63430008070033'

        w3.eth.default_account = w3.eth.accounts[0]
        #TODO Creates new contract
        # tx_hash = w3.eth.contract(
        #         abi=abi,
        #         bytecode=bytecode).constructor().transact()

        # address = w3.eth.get_transaction_receipt(tx_hash)['contractAddress']
        # print(address)
        address = '0x11932E8739744CE261D970632b051Af742a48152'
        contract = w3.eth.contract(
            address=address,
            abi=abi
        )

        data = '{"contract_address": "%s", "uuid": "%s", "email": "%s", "name": "%s", "file_hash": "%s"}'% (address, uuid, email, name, file_hash)
        #TODO Adds data to the contract
        tx_hash = contract.functions.set(data).transact()
        # tx_hash = contract.functions.set('{"id": 97, "name": "Yash"}').transact()

        # tx_hash = '0x55133239012c9b3e8e05aa760db81fb21957e36ca277faedab480b125588222f'
        # tx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)
        # transaction = web3.eth.get_transaction(tx_hash)
        # data = contract.decode_function_input(transaction.input)
        # print(w3.eth.get_transaction_receipt(tx_hash))

        # data = contract.functions.get().call()

        # data = json.loads(data)

        # file_hash = data["file_hash"]
        # url = 'http://localhost:8080/ipfs/%s'% file_hash
        # download(url)