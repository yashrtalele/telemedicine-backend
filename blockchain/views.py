from django.shortcuts import render
import json
import ipfsApi
from retry import retry
import string
import random
import urllib.request
from web3 import Web3
from rest_framework import generics, status, views, permissions
from rest_framework.response import Response
from .serializers import FileHashSerializer
from .models import FileHash
from .renderers import FileHashRenderer

# Create your views here.

class CreateFileHashBlockchain(generics.GenericAPIView):
    serializer_class = FileHashSerializer
    renderer_classes = (FileHashRenderer,)
    
    def post(self, request):
        data = request.data
        doctor_uuid = data.get('doctor_id')
        patient_uuid = data.get('patient_id')
        file_str = data.get('tx_hash')
        # file_hash = data.get('file_hash')
        # api = ipfsApi.Client('127.0.0.1', 5001)
        # res = api.add(file_str)
        # file_hash = res['Hash']
        file_hash = file_str
        url = 'http://127.0.0.1:7545'
        w3 = Web3(Web3.HTTPProvider(url))

        abi = json.loads('[{"inputs":[],"name":"getStrArr","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"newValue","type":"string"}],"name":"pushToStrArr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"str_arr","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}]')
        bytecode = "608060405234801561001057600080fd5b5061078c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063621b8c321461004657806374dfac3314610076578063e325d01b14610094575b600080fd5b610060600480360381019061005b91906103e5565b6100b0565b60405161006d919061052f565b60405180910390f35b61007e61015c565b60405161008b919061050d565b60405180910390f35b6100ae60048036038101906100a9919061039c565b610235565b005b600081815481106100c057600080fd5b9060005260206000200160009150905080546100db90610659565b80601f016020809104026020016040519081016040528092919081815260200182805461010790610659565b80156101545780601f1061012957610100808354040283529160200191610154565b820191906000526020600020905b81548152906001019060200180831161013757829003601f168201915b505050505081565b60606000805480602002602001604051908101604052809291908181526020016000905b8282101561022c57838290600052602060002001805461019f90610659565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb90610659565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b505050505081526020019060010190610180565b50505050905090565b600081908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610270929190610274565b5050565b82805461028090610659565b90600052602060002090601f0160209004810192826102a257600085556102e9565b82601f106102bb57805160ff19168380011785556102e9565b828001600101855582156102e9579182015b828111156102e85782518255916020019190600101906102cd565b5b5090506102f691906102fa565b5090565b5b808211156103135760008160009055506001016102fb565b5090565b600061032a61032584610576565b610551565b9050828152602081018484840111156103465761034561071f565b5b610351848285610617565b509392505050565b600082601f83011261036e5761036d61071a565b5b813561037e848260208601610317565b91505092915050565b6000813590506103968161073f565b92915050565b6000602082840312156103b2576103b1610729565b5b600082013567ffffffffffffffff8111156103d0576103cf610724565b5b6103dc84828501610359565b91505092915050565b6000602082840312156103fb576103fa610729565b5b600061040984828501610387565b91505092915050565b600061041e838361049b565b905092915050565b6000610431826105b7565b61043b81856105da565b93508360208202850161044d856105a7565b8060005b85811015610489578484038952815161046a8582610412565b9450610475836105cd565b925060208a01995050600181019050610451565b50829750879550505050505092915050565b60006104a6826105c2565b6104b081856105eb565b93506104c0818560208601610626565b6104c98161072e565b840191505092915050565b60006104df826105c2565b6104e981856105fc565b93506104f9818560208601610626565b6105028161072e565b840191505092915050565b600060208201905081810360008301526105278184610426565b905092915050565b6000602082019050818103600083015261054981846104d4565b905092915050565b600061055b61056c565b9050610567828261068b565b919050565b6000604051905090565b600067ffffffffffffffff821115610591576105906106eb565b5b61059a8261072e565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015610644578082015181840152602081019050610629565b83811115610653576000848401525b50505050565b6000600282049050600182168061067157607f821691505b60208210811415610685576106846106bc565b5b50919050565b6106948261072e565b810181811067ffffffffffffffff821117156106b3576106b26106eb565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6107488161060d565b811461075357600080fd5b5056fea2646970667358221220a4295a8a0cce368fd7dce0372ea0f84889bf25edb586e501ea59df41a1a8831a64736f6c63430008070033"
        w3.eth.default_account = w3.eth.accounts[0]
        #TODO Creates new contract
        # tx_hash = w3.eth.contract(
        #         abi=abi,
        #         bytecode=bytecode).constructor().transact()

        # address = w3.eth.get_transaction_receipt(tx_hash)['contractAddress']
        # print(address)
        address = '0x9fB1a3DAa1D77d3e0991a455f44f432274802241'
        contract = w3.eth.contract(
            address=address,
            abi=abi
        )

        data = '{"contract_address": "%s", "uuid": "%s", "file_hash": "%s"}'% (address, patient_uuid, file_hash)
        #TODO Adds data to the contract
        tx_hash = contract.functions.pushToStrArr(data).transact()
        # tx_hash = contract.functions.set('{"id": 97, "name": "Yash"}').transact()

        # tx_hash = '0x55133239012c9b3e8e05aa760db81fb21957e36ca277faedab480b125588222f'
        # tx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)
        # transaction = web3.eth.get_transaction(tx_hash)
        # data = contract.decode_function_input(transaction.input)
        # print(w3.eth.get_transaction_receipt(tx_hash))

        # data = contract.functions.getStrArr().call()

        # data = json.loads(data)

        # file_hash = data["file_hash"]
        # url = 'http://localhost:8080/ipfs/%s'% file_hash
        # download(url)
        # file_tx_hash = tx_hash.hex()
        final_data = {
            "doctor_id": doctor_uuid,
            "patient_id": patient_uuid,
            "tx_hash": tx_hash
        }
        # print(final_data)
        # print(bytes.fromhex(file_tx_hash[2:]))
        serializer = FileHashSerializer(data=final_data)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        print("Success!")
        return Response(serializer.data, status=status.HTTP_201_CREATED)


'''
#! Smart Contracts Code
# #? Every time instead of creating a new contract, create a contract only for a particular chat and save the contract address chat details and use that address for creating transactions.

import json
import ipfsApi
from retry import retry
import string
import random
import urllib.request
import ast
from web3 import Web3

@retry(urllib.error.URLError, tries=4)
def download(url):
    N = 9
    res = ''.join(random.choices(string.ascii_uppercase + string.digits, k = N))
    filename = "%s.png"% res
    urllib.request.urlretrieve(url, filename)

def main():
    api = ipfsApi.Client('127.0.0.1', 5001)
    res = api.add('image.jpg')
    file_hash = res['Hash']
    url = 'http://127.0.0.1:7545'
    w3 = Web3(Web3.HTTPProvider(url))



    abi = json.loads('[{"inputs":[],"name":"getStrArr","outputs":[{"internalType":"string[]","name":"","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"newValue","type":"string"}],"name":"pushToStrArr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"str_arr","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}]')
    bytecode = "608060405234801561001057600080fd5b5061078c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063621b8c321461004657806374dfac3314610076578063e325d01b14610094575b600080fd5b610060600480360381019061005b91906103e5565b6100b0565b60405161006d919061052f565b60405180910390f35b61007e61015c565b60405161008b919061050d565b60405180910390f35b6100ae60048036038101906100a9919061039c565b610235565b005b600081815481106100c057600080fd5b9060005260206000200160009150905080546100db90610659565b80601f016020809104026020016040519081016040528092919081815260200182805461010790610659565b80156101545780601f1061012957610100808354040283529160200191610154565b820191906000526020600020905b81548152906001019060200180831161013757829003601f168201915b505050505081565b60606000805480602002602001604051908101604052809291908181526020016000905b8282101561022c57838290600052602060002001805461019f90610659565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb90610659565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b505050505081526020019060010190610180565b50505050905090565b600081908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610270929190610274565b5050565b82805461028090610659565b90600052602060002090601f0160209004810192826102a257600085556102e9565b82601f106102bb57805160ff19168380011785556102e9565b828001600101855582156102e9579182015b828111156102e85782518255916020019190600101906102cd565b5b5090506102f691906102fa565b5090565b5b808211156103135760008160009055506001016102fb565b5090565b600061032a61032584610576565b610551565b9050828152602081018484840111156103465761034561071f565b5b610351848285610617565b509392505050565b600082601f83011261036e5761036d61071a565b5b813561037e848260208601610317565b91505092915050565b6000813590506103968161073f565b92915050565b6000602082840312156103b2576103b1610729565b5b600082013567ffffffffffffffff8111156103d0576103cf610724565b5b6103dc84828501610359565b91505092915050565b6000602082840312156103fb576103fa610729565b5b600061040984828501610387565b91505092915050565b600061041e838361049b565b905092915050565b6000610431826105b7565b61043b81856105da565b93508360208202850161044d856105a7565b8060005b85811015610489578484038952815161046a8582610412565b9450610475836105cd565b925060208a01995050600181019050610451565b50829750879550505050505092915050565b60006104a6826105c2565b6104b081856105eb565b93506104c0818560208601610626565b6104c98161072e565b840191505092915050565b60006104df826105c2565b6104e981856105fc565b93506104f9818560208601610626565b6105028161072e565b840191505092915050565b600060208201905081810360008301526105278184610426565b905092915050565b6000602082019050818103600083015261054981846104d4565b905092915050565b600061055b61056c565b9050610567828261068b565b919050565b6000604051905090565b600067ffffffffffffffff821115610591576105906106eb565b5b61059a8261072e565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015610644578082015181840152602081019050610629565b83811115610653576000848401525b50505050565b6000600282049050600182168061067157607f821691505b60208210811415610685576106846106bc565b5b50919050565b6106948261072e565b810181811067ffffffffffffffff821117156106b3576106b26106eb565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6107488161060d565b811461075357600080fd5b5056fea2646970667358221220a4295a8a0cce368fd7dce0372ea0f84889bf25edb586e501ea59df41a1a8831a64736f6c63430008070033"
    w3.eth.default_account = w3.eth.accounts[0]
    #TODO Creates new contract
    # tx_hash = w3.eth.contract(
    #         abi=abi,
    #         bytecode=bytecode).constructor().transact()

    # address = w3.eth.get_transaction_receipt(tx_hash)['contractAddress']
    # print(address)
    address = '0x9fB1a3DAa1D77d3e0991a455f44f432274802241'
    contract = w3.eth.contract(
        address=address,
        abi=abi
    )

    data = '{"uuid": "0e9d5197-a294-428f-a70a-31258a2b40d1", "name": "Yash", "file_hash": "%s"}'% file_hash
    #TODO Adds data to teh contract
    tx_hash = contract.functions.pushToStrArr(data).transact()
    # tx_hash = contract.functions.set('{"id": 97, "name": "Yash"}').transact()

    # tx_hash = '0x55133239012c9b3e8e05aa760db81fb21957e36ca277faedab480b125588222f'
    # tx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)

    # print(w3.eth.get_transaction_receipt(tx_hash))

    #TODO Gets file hash of particular tx_hash
    data = contract.functions.getStrArr().call()
    
    data1 = json.loads(data[0])
    
    file_hash = data1["file_hash"]
    
    url = 'http://localhost:8080/ipfs/%s'% file_hash
    print(url)
    download(url)

if __name__ == '__main__':
    main()
'''